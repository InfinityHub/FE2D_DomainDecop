SUBROUTINE zmumps_solver(norder, nnzero, irn, jcn, array, nrhs, rhs, symmt, sol)
  ! Purpose: Use MUMPS, version 5.3.3, direct solver to get the solution to the linear system 
  !          of equations. This is a MPI (parallel) version.
  ! Note:
  !  -- The input matrix,A, is stored in a compressed-by-row rank-1 array, together with
  !     two integer arrays containing the indices info. However, this data storage
  !     (known as COO,Coordinate format) is not exactly the traditional CSR format
  !     as the irn stores the row indices of all nonzero entries in A.
  !
  !  -- outputs in this subroutine.
  !
  ! --- For multiple right-hand-sides (RHS), mumps_par%RHS will store all columns of RHS
  !    in a one-dimensional style and column-by-column order. This can be set by using
  !    RESHAPE function.

  USE float_precision, ONLY: DPR, CDPR
  USE modelling_parameter, ONLY: modelling
  USE FORTRAN_generic, ONLY: print_general_msg
  IMPLICIT NONE

  INCLUDE 'mpif.h'
  ! Only perform complex (double precision) arithmetics
  INCLUDE 'zmumps_struc.h'

  TYPE(ZMUMPS_STRUC)      :: mumps_par
  INTEGER                 :: ierr, i
  INTEGER(DPR)            :: i8


  INTEGER,INTENT(IN)      :: norder, nnzero, nrhs, irn(nnzero), jcn(nnzero)
  COMPLEX(CDPR),INTENT(IN)      :: array(nnzero)
  COMPLEX(CDPR),INTENT(IN)   :: rhs(norder, nrhs)
  COMPLEX(CDPR),INTENT(INOUT)   :: sol(norder, nrhs)  ! solution array

  CHARACTER(LEN=*),INTENT(IN)  :: symmt

  COMPLEX(CDPR), ALLOCATABLE :: RHS_bridge(:,:)

  !CALL MPI_INIT(ierr)
  ! Define a communicator for the package.
  mumps_par%COMM = MPI_COMM_WORLD

  ! Initialize and define the symmetry of the matrix A.
  IF( TRIM(ADJUSTL(symmt)) == 'UNSYM' )  THEN
     mumps_par%SYM = 0     ! SYM=0 : A is unsymmetric
  ELSE
     ! SYM=2 : A is general symmetric
     ! SYM=1 : A is symmetric & positive definite
     mumps_par%SYM = 2     
  END IF

  mumps_par%PAR = 1     !  the host works

  ! Assign the job(-1:initialize; 1:analysis; 2:factorization; -2: terminate)
  ! for JOB = 3,4,5,6, see the document.
  mumps_par%JOB = -1
  CALL ZMUMPS(mumps_par)

  ! INFOG(1)=0:normal; <0: errors; >0:warnings
  IF (mumps_par%INFOG(1).LT.0) THEN
     WRITE(6,'(A,A,I6,A,I9)') '(MUMPS_SOLVER_1)ERROR RETURN: ','mumps_par%INFOG(1)= ',&
          mumps_par%INFOG(1), '    mumps_par%INFOG(2)= ', mumps_par%INFOG(2)
     CALL MPI_FINALIZE(ierr)
     STOP
  END IF

  ! Define the problem on the host(processor 0)
  IF( mumps_par%MYID == 0 ) THEN
     mumps_par%N = norder
     mumps_par%NNZ = nnzero

     mumps_par%NRHS = nrhs
     mumps_par%LRHS = norder

     ALLOCATE( mumps_par%IRN( mumps_par%NNZ ) )
     ALLOCATE( mumps_par%JCN( mumps_par%NNZ ) )
     ALLOCATE( mumps_par%A( mumps_par%NNZ ) )

     ! mumps_par%RHS is a one-dimensional (rank-1) array by declarmation (see manual)
     ALLOCATE( mumps_par%RHS( mumps_par%LRHS * mumps_par%NRHS ) )

     DO i8 = 1, nnzero
        mumps_par%IRN(i8) = irn(i8)
        mumps_par%JCN(i8) = jcn(i8)
        mumps_par%A(i8) = array(i8)
     END DO

!!$     DO i = 1, norder
!!$        mumps_par%RHS(i, 1: nrhs) = RESHAPE(rhs, (//))
!!$     END DO
     ALLOCATE( RHS_bridge(mumps_par%LRHS * mumps_par%NRHS, 1) )
     RHS_bridge = RESHAPE( rhs, (/norder*nrhs, 1/) )

     mumps_par%RHS = RHS_bridge(:, 1)     
  END IF

  ! Solve the problem

  IF(.NOT. modelling%solver_verbose) THEN
     mumps_par%ICNTL(3) = -1  ! suppress the standard output stream
  END IF
  !the amount of increase in real/complex work space, DEFAULT = 20 (%)
  mumps_par%ICNTL(14) = 30
  mumps_par%ICNTL(6) = 5  ! permutation  
  mumps_par%JOB = 6     ! analysis + factorize + solution

  CALL ZMUMPS(mumps_par)
  IF (mumps_par%INFOG(1).LT.0) THEN
     WRITE(6,'(A,A,I6,A,I9)') '(MUMPS_SOLVER_2)ERROR RETURN: ','mumps_par%INFOG(1)= ',&
          mumps_par%INFOG(1), 'mumps_par%INFOG(2)= ', mumps_par%INFOG(2)
     CALL MPI_FINALIZE(ierr)
     STOP
  END IF

  ! Solution has been assembled on the host (RHS)
  IF (mumps_par%MYID == 0) THEN
     CALL print_general_msg('(MUMPS_SOLVER) Solution is returned.')
  END IF

!!$  DO i = 1, norder
!!$     rhs(i, 1: nrhs) = mumps_par%RHS(i, 1: nrhs)
!!$  END DO

  sol = RESHAPE( mumps_par%RHS, (/norder, nrhs/) )

  ! Deallocate MUMPS data
  IF (mumps_par%MYID .EQ. 0) THEN
     DEALLOCATE( mumps_par%IRN )
     DEALLOCATE( mumps_par%JCN )
     DEALLOCATE( mumps_par%A )
     DEALLOCATE( mumps_par%RHS )
  END IF

  ! Destroy the instance(deallocate internal data structures)
  mumps_par%JOB = -2
  mumps_par%ICNTL(3) = -1  ! no standard output
  CALL ZMUMPS(mumps_par)
  IF (mumps_par%INFOG(1).LT.0) THEN
     WRITE(6,'(A,A,I6,A,I9)') '(MUMPS_SOLVER_3)ERROR RETURN: ','mumps_par%INFOG(1)= ',&
          mumps_par%INFOG(1), 'mumps_par%INFOG(2)= ', mumps_par%INFOG(2)
     CALL MPI_FINALIZE(ierr)
     STOP
  END IF
  !CALL MPI_FINALIZE(ierr)

  RETURN
END SUBROUTINE zmumps_solver



SUBROUTINE zmumps_solver_5_0_0(norder, nnzero, irn, jcn, array, nrhs, rhs, symmt, sol) 
  ! Purpose: Use MUMPS, version 5.0.0, direct solver to get the solution to the linear system 
  !          of equations. This is a MPI-free (sequential) version with multithreads functionality.
  ! Note:
  !  -- The input matrix,A, is stored in a compressed-by-row rank-1 array, together with
  !     two integer arrays containing the indices info. However, this data storage
  !     (known as COO,Coordinate format) is not exactly the traditional CSR format
  !     as the irn stores the row indices of all nonzero entries in A.
  !
  !  -- outputs in this subroutine.
  !
  ! --- For multiple right-hand-sides (RHS), mumps_par%RHS will store all columns of RHS
  !    in a one-dimensional style and column-by-column order. This can be set by using
  !    RESHAPE function.

  USE float_precision, ONLY: DPR, CDPR
  USE modelling_parameter, ONLY: modelling
  USE FORTRAN_generic, ONLY: print_general_msg
  IMPLICIT NONE

  INCLUDE 'mpif.h'
  ! Only perform complex (double precision) arithmetics
  INCLUDE 'zmumps_struc.h'

  TYPE(ZMUMPS_STRUC)      :: mumps_par
  INTEGER                 :: ierr, i

  INTEGER,INTENT(IN)      :: norder, nnzero, nrhs, irn(nnzero), jcn(nnzero)
  COMPLEX(CDPR),INTENT(IN)      :: array(nnzero)
  COMPLEX(CDPR),INTENT(IN)   :: rhs(norder, nrhs)
  COMPLEX(CDPR),INTENT(INOUT)   :: sol(norder, nrhs)  ! solution array

  CHARACTER(LEN=*),INTENT(IN)  :: symmt

  COMPLEX(CDPR), ALLOCATABLE :: RHS_bridge(:,:)

  CALL MPI_INIT(ierr)
  ! Define a communicator for the package.
  mumps_par%COMM = MPI_COMM_WORLD

  ! Initialize and define the symmetry of the matrix A.
  IF( TRIM(ADJUSTL(symmt)) == 'UNSYM' )  THEN
     mumps_par%SYM = 0     ! SYM=0 : A is unsymmetric
  ELSE
     ! SYM=2 : A is general symmetric
     ! SYM=1 : A is symmetric & positive definite
     mumps_par%SYM = 2     
  END IF

  mumps_par%PAR = 1     !  the host works

  ! Assign the job(-1:initialize; 1:analysis; 2:factorization; -2: terminate)
  ! for JOB = 3,4,5,6, see the document.
  mumps_par%JOB = -1

  CALL ZMUMPS(mumps_par)

  ! INFOG(1)=0:normal; <0: errors; >0:warnings
  IF (mumps_par%INFOG(1).LT.0) THEN
     WRITE(6,'(A,A,I6,A,I9)') '(MUMPS_SOLVER_1)ERROR RETURN: ','mumps_par%INFOG(1)= ',&
          mumps_par%INFOG(1), '    mumps_par%INFOG(2)= ', mumps_par%INFOG(2)
     CALL MPI_FINALIZE(ierr)
     STOP
  END IF

  ! Define the problem on the host(processor 0)
  IF( mumps_par%MYID == 0 ) THEN
     mumps_par%N = norder
     mumps_par%NZ = nnzero

     mumps_par%NRHS = nrhs
     mumps_par%LRHS = norder

     ALLOCATE( mumps_par%IRN( mumps_par%NZ ) )
     ALLOCATE( mumps_par%JCN( mumps_par%NZ ) )
     ALLOCATE( mumps_par%A( mumps_par%NZ ) )

     ! mumps_par%RHS is a one-dimensional (rank-1) array by declarmation (see manual)
     ALLOCATE( mumps_par%RHS( mumps_par%LRHS * mumps_par%NRHS ) )

     DO i = 1, nnzero
        mumps_par%IRN(i) = irn(i)
        mumps_par%JCN(i) = jcn(i)
        mumps_par%A(i) = array(i)
     END DO

!!$     DO i = 1, norder
!!$        mumps_par%RHS(i, 1: nrhs) = RESHAPE(rhs, (//))
!!$     END DO
     ALLOCATE( RHS_bridge(mumps_par%LRHS * mumps_par%NRHS, 1) )
     RHS_bridge = RESHAPE( rhs, (/norder*nrhs, 1/) )

     mumps_par%RHS = RHS_bridge(:, 1)     
  END IF

  ! Solve the problem

  IF(.NOT. modelling%solver_verbose) THEN
     mumps_par%ICNTL(3) = -1  ! suppress the standard output stream
  END IF
  !the amount of increase in real/complex work space, DEFAULT = 20 (%)
  mumps_par%ICNTL(14) = 30
  mumps_par%ICNTL(6) = 5  ! permutation  
  mumps_par%JOB = 6     ! analysis + factorize + solution

  CALL ZMUMPS(mumps_par)
  IF (mumps_par%INFOG(1).LT.0) THEN
     WRITE(6,'(A,A,I6,A,I9)') '(MUMPS_SOLVER_2)ERROR RETURN: ','mumps_par%INFOG(1)= ',&
          mumps_par%INFOG(1), 'mumps_par%INFOG(2)= ', mumps_par%INFOG(2)
     CALL MPI_FINALIZE(ierr)
     STOP
  END IF

  ! Solution has been assembled on the host (RHS)
  IF (mumps_par%MYID == 0) THEN
     CALL print_general_msg('(MUMPS_SOLVER) Solution is returned.')
  END IF

!!$  DO i = 1, norder
!!$     rhs(i, 1: nrhs) = mumps_par%RHS(i, 1: nrhs)
!!$  END DO

  sol = RESHAPE( mumps_par%RHS, (/norder, nrhs/) )

  ! Deallocate MUMPS data
  IF (mumps_par%MYID .EQ. 0) THEN
     DEALLOCATE( mumps_par%IRN )
     DEALLOCATE( mumps_par%JCN )
     DEALLOCATE( mumps_par%A )
     DEALLOCATE( mumps_par%RHS )
  END IF

  ! Destroy the instance(deallocate internal data structures)
  mumps_par%JOB = -2
  mumps_par%ICNTL(3) = -1  ! no standard output
  CALL ZMUMPS(mumps_par)
  IF (mumps_par%INFOG(1).LT.0) THEN
     WRITE(6,'(A,A,I6,A,I9)') '(MUMPS_SOLVER_3)ERROR RETURN: ','mumps_par%INFOG(1)= ',&
          mumps_par%INFOG(1), 'mumps_par%INFOG(2)= ', mumps_par%INFOG(2)
     CALL MPI_FINALIZE(ierr)
     STOP
  END IF

  RETURN
END SUBROUTINE zmumps_solver_5_0_0
